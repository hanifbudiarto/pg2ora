/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pg2ora;

import db.SQLiteConnect;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author hanif
 */
public class UIConverter extends javax.swing.JPanel {

    /**
     * Creates new form UIConverter
     */
    
    public UIConverter() {
        initComponents();
        this.getListDataTypes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        tfFileSQL = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        tfOutput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taStatus = new javax.swing.JTextArea();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel8.setFont(new java.awt.Font("Calibri Light", 0, 36)); // NOI18N
        jLabel8.setText("PG2ORA");
        jPanel1.add(jLabel8);

        jLabel9.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel9.setText("Convert PostgreSQL (table, constraint, index) to Oracle");
        jPanel1.add(jLabel9);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButton1.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 6, 0, 0);
        jPanel2.add(jButton1, gridBagConstraints);

        tfFileSQL.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 244;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 18, 0, 0);
        jPanel2.add(tfFileSQL, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel1.setText("SQL File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 0, 0);
        jPanel2.add(jLabel1, gridBagConstraints);

        tfOutput.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 244;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 18, 0, 0);
        jPanel2.add(tfOutput, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel2.setText("Output");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 0, 0);
        jPanel2.add(jLabel2, gridBagConstraints);

        jButton3.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jButton3.setText("Browse");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 6, 0, 0);
        jPanel2.add(jButton3, gridBagConstraints);

        jPanel3.add(jPanel2);

        jButton2.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jButton2.setText("Convert");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton2);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Status", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri Light", 0, 18))); // NOI18N

        taStatus.setEditable(false);
        taStatus.setColumns(20);
        taStatus.setRows(5);
        jScrollPane1.setViewportView(taStatus);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String filePath = Util.getFileFromDialog(this);
        tfFileSQL.setText(filePath);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jButton2.setEnabled(false);
        Thread thread = new Thread() {
            @Override
            public void run() {
                String filename = tfFileSQL.getText();
                convertPg2ORA(filename);
            }  
        };
        thread.start();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String filePath = Util.getFileFromDialog(this);
        tfOutput.setText(filePath);
    }//GEN-LAST:event_jButton3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea taStatus;
    private javax.swing.JTextField tfFileSQL;
    private javax.swing.JTextField tfOutput;
    // End of variables declaration//GEN-END:variables

    String currentLine = null;
    String lastLine = null;
    
    final String createTable = "CREATE TABLE";
    final String createIndex = "CREATE INDEX";
    final String addConstraint = "ADD CONSTRAINT";
    
    List <Map<String, String>> listDataTypes = new ArrayList<>();
    
    private void convertPg2ORA(String filename) {
        taStatus.append("Processing...Please wait\n");
        boolean tableFound = false;        
        FileReader fileReader = null;
        try {
            File file = new File(filename);
            fileReader = new FileReader(file);
            BufferedReader bufferReader = new BufferedReader(fileReader);
            
            while ( (currentLine = bufferReader.readLine()) != null) {
                
                // if line contains CREATE TABLE, CREATE INDEX, ADD CONSTRAINT
                if (tableFound || this.isTableFound() || this.isConstraintFound() || this.isIndexFound()) {
                    
                    if (this.isTableFound()){ // if CREATE TABLE is found
                        tableFound = true;
                    }
                    
                    if (this.isConstraintFound()) {                                             
                        this.convertConstraint();
                        this.writeToNewSQLFile(lastLine);
                    }
                    
                    if (this.isIndexFound()) this.convertIndex();
                    
                    if (!this.isTableFound() && tableFound){
                        String firstLetter = String.valueOf(currentLine.charAt(0));
                        if (firstLetter.contains(")")) {
                            currentLine = ");";
                            tableFound = false;
                        }
                        else this.convertTable();
                    }
                    
                    this.writeToNewSQLFile(currentLine);                     
                }
                lastLine = currentLine;
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(UIConverter.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(UIConverter.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fileReader.close();
            } catch (IOException ex) {
                Logger.getLogger(UIConverter.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        taStatus.append("Success");
        jButton2.setEnabled(true);
    }
    
    private boolean isTableFound() {
        return currentLine.contains(createTable);
    }
    
    private void convertTable() {
        ArrayList<Map <String, String>> lines = this.getSplittedColumnDatatype();
        Map<String, String> mapLines = lines.get(0);
        String column = "", datatype = "";
        for (Map.Entry<String, String> line: mapLines.entrySet()) {
            column = line.getKey();
            datatype = line.getValue();
        }
        
        for (Map<String, String> map : listDataTypes ) {
            String key = "", value = "";
            for (Map.Entry<String, String> entry: map.entrySet()) {
                key = entry.getKey();
                value = entry.getValue();                
            }
            datatype = datatype.replaceAll(key, value);  
        }
        datatype = this.removeOther(datatype);
        
        column = column.toUpperCase();
        if (!column.contains("\"") && !"CONSTRAINT".equals(column)) {
            column = "\"" + column + "\"";
        }        
        
        currentLine = column +" "+ datatype;
    }
    
    private ArrayList<Map <String, String> > getSplittedColumnDatatype () {
        ArrayList<Map <String, String> > list = new ArrayList<>();
        
        currentLine = currentLine.trim();
        String datatype = "";
        String columnName = "";
        String lines[] = currentLine.split("\\s+");
        boolean isNotFirst = false;
        for (String line : lines) {
            if (isNotFirst) {
                datatype += line;
                datatype += " ";
            }
            else {
                columnName = line;
                isNotFirst = true;
            }
        }  
        
        Map<String, String> map = new HashMap<>();
        map.put(columnName, datatype);
        list.add(map);
        return list;
    }
    
    private boolean isConstraintFound() {
        return currentLine.contains(addConstraint);
    }    
    
    private void convertConstraint() {
        lastLine = lastLine.replaceAll("ALTER TABLE ONLY", "ALTER TABLE");
        this.removeFillFactor();
    }
    
    private boolean isIndexFound() {
        return currentLine.contains(createIndex);
    }
    
    private void convertIndex() {
        currentLine = currentLine.replaceAll("USING btree", "");
        this.removeFillFactor();
    }
    
    private void writeToNewSQLFile(String line) {
        Util.writeToAFile(tfOutput.getText(), line+"\n");
    }
    
    private void getListDataTypes () {
        SQLiteConnect sqlConnect = SQLiteConnect.getInstance();
        ResultSet rset = null;
        try {
            rset = sqlConnect.query("SELECT postgres, oracle FROM datatypes");
            while (rset.next()) {
                Map <String, String> entry = new HashMap<>();
                entry.put(rset.getString(1),rset.getString(2));
                listDataTypes.add(entry);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UIDump.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void removeFillFactor () {
         currentLine = currentLine.replaceAll("WITH \\(fillfactor=[0-9]*\\)", "");
    }
    
    private String removeOther (String line) {
        line = line.replaceAll("::[a-z0-9]*", "");
        if (line.contains("date") && line.contains("DEFAULT")
                && line.contains("now")) line = "date DEFAULT SYSDATE,";
        else if (line.contains("timestamp") && line.contains("DEFAULT")
                && line.contains("now")) line = "timestamp DEFAULT SYSTIMESTAMP,";
        line = line.replaceAll("DEFAULT true", "DEFAULT 1");
        line = line.replaceAll("DEFAULT false", "DEFAULT 0");
        return line;
    }
}
